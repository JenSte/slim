
* Introduction

  The 'm5234bcc' board supports the Freescale M5234BCC, a development
  board for the MCF5234 featuring the National Semiconductor DP83640
  PHY with PTP hardware support. For this board, we recommend using a
  newer Code Sourcery tool chain. The SLIM board support was developed
  using freescale-coldfire-2011.09-23.

* About U-Boot

  The boot loader shipped with the board is dBUG, a really buggy and
  limited tool. We recommend installing a newer U-Boot version. This
  is safe to try, as long as you pay attention to the correct position
  of the DB_EN jumper. We used U-Boot 2011.09-01111-g0562219 in order
  to develop this SLIM board.

* Compiling the Image

  - export BOARD=m523bcc
  - export SKIP_STRIP=y
  - make
  - make install

* Booting the Image

  This section describes how to use a ROM file system in RAM. We
  assume here that SLIM variable CONFIG_tftp_dir is /home/tftp and the
  Linux kernel you want to use is ${KBUILD_OUTPUT}/vmlinux.

** Create kernel/romfs by hand

   ${CROSS_COMPILE}objcopy \
	--output-target=binary ${KBUILD_OUTPUT}/vmlinux /tmp/new.bin

   cat /tmp/new.bin m5234bcc/m5234bcc-romfs > /home/tftp/new.bin

** Configure the U-Boot network settings

   1. Check network settings with the 'printenv' command.
   2. Change 'serverip' if needed.

      setenv ipaddr 192.168.0.77
      setenv serverip 192.168.0.12
      setenv netmask 255.255.255.0

** Download and start the image

   1. Download the image

      setenv bootfile m5234bcc-image
      setenv loadaddr 0x20000
      tftp ${loadaddr} ${bootfile}

   2. Jump to the start address. The MII command is a workaround to
      ensure that Linux will correctly probe the PHY.

      mii dump
      go 0x20000

** Using dBUG (obsolete)

   sudo ethtool -s eth0 speed 10 autoneg off
   set server 192.168.0.12
   set client 192.168.0.11
   set netmask 255.255.255.0
   set filename new.bin
   dn -i new.bin
   go 0x20000
   sudo ethtool -s eth0 speed 100 autoneg on

* Installing into NOR flash

  The flash is only 2 MB, which is a bit small for Linux. It might be
  possible to cram a minimal kernel, with a minimal busybox and one
  custom application in there, but we do not explain how to do that
  any further here.

